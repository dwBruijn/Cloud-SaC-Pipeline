name: Security as Code Pipeline

on:
  pull_request:
    paths:
      - 'terraform/**/*.tf'
      - '.github/workflows/security-scan.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**/*.tf'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write

jobs:
  security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Install tfsec
        run: |
          wget -q https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec-linux-amd64
          sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec
          tfsec --version
      
      - name: Run Terraform Format Check
        id: fmt
        run: |
          cd terraform/
          terraform fmt -check -recursive || echo "fmt_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Run Security Scans
        id: scan
        run: |
          python scripts/scan.py --path terraform/ --output-dir scan-results
        continue-on-error: true
      
      - name: Generate PR Comment Report
        if: github.event_name == 'pull_request'
        run: |
          python scripts/generate-pr-comment.py \
            --results-dir scan-results \
            --output pr-comment.md
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ”’ Security Scan Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Upload Checkov SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scan-results/results_sarif.sarif
          category: checkov
        continue-on-error: true
      
      - name: Upload Scan Results as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            scan-results/
            pr-comment.md
          retention-days: 30
      
      - name: Check Security Gate
        run: |
          python scripts/security-gate.py --results-dir scan-results